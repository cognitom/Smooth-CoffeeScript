<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <style type="text/css">

  /*<![CDATA[*/

  span.sgc-7 {font-size: 10.000000pt; font-family: 'Consolas'; font-style: italic; color: rgb(25.000000%, 50.000000%, 0.000000%)}
  div.sgc-6 {background-color: rgb(92.500000%, 99.200000%, 100.000000%)}
  span.sgc-5 {font-size: 10.000000pt; font-family: 'Consolas'; color: rgb(24.000000%, 16.500000%, 60.000000%)}
  span.sgc-4 {font-size: 10.000000pt; font-family: 'Consolas'}
  span.sgc-3 {font-family: Consolas; font-size: 13px;}
  blockquote.sgc-2 {margin: 0 0 0 40px; border: none; padding: 0px;}
  div.sgc-1 {font-style: italic}
  /*]]>*/
  </style>
</head>

<body>
  <div>
    <div>
      <br />
    </div>

    <h3 id="heading_id_2">導入</h3>

    <div>
      PCが最初に導入された頃、通常は単純なプログラミング言語や、BASICの派生言語が殆どの物に付属されていました。一昔前はプログラミング言語を覚えないとコンピューターは使えなかった。今ではその必要がない。今では、コンピュータが安価になったため、初心者ユーザーが増えマウスで物事をクリックする他、得られるようなことはなくなってきました。しかし、技術的な工夫に向かって努力を続ける私たちにとって、毎日コンピュータの使用におけるプログラミングの除去は、バリアのようなものを提示されたようなものだ。
    </div>

    <div>
      <br />
    </div>

    <div>
      幸いなことに、ワールドワイドウェブの発展の影響として、すべてのコンピュータにとても現代的なウェブブラウザが搭載されているため、簡単にCoffeeScriptの環境に適応できるところのJavaScriptプログラミング環境がある。技術的な詳細にユーザを煩わせないという今日の精神で、バックグラウンドはうまく隠され続けていますが、ウェブページには、プログラミングを学習するためのプラットフォームとして使用することができます。coffeescript.orgのメニューで"Try CoffeeScript "を選択したり、サンプルコードの下の"load"ボタンをクリックすることでそのような環境を試すことができます。
    </div>

    <div>
      <br />
    </div>

    <div>
      <hr class="sigilChapterBreak" />
    </div>

    <div>
      <br />
    </div>
  </div>

  <blockquote class="sgc-2">
    <div class="sgc-1">
      私は学ぶこと熱望していない人々、また彼ら自身で説明しようとしない人々をに教えることはしません。もし、私が正方形の一つの角で説明したのに、彼らが他の角で私の説明を思い出せないようなら、それを繰り返してもしようがないでしょう。
    </div>

    <div>
      <br />
    </div>
  </blockquote>

  <div>
    <div>
      この本は、CoffeeScript の説明のほかにプログラミングの基本原則についても紹介するとします。プログラミングは、結局のところ、難しいです。基本的なルールは、ほとんどの場合、単純明快です。しかしプログラムは、これらの基本的なルールの上に構築しながら、独自のルールを導入したり、自分なりの工夫を行う場合は十分複雑になる傾向があります。
    </div>

    <div>
      このため、プログラミングはほとんどの場合単純ですが、一方で予測可能です。この分野の建国の父的なドナルド・クヌース、曰く、「芸術」です。
    </div>

    <div>
      <br />
    </div>

    <div>
      単に受動的な読書を行うよりも、この本から何かを取得しましょう。鋭くあろうとしてください、演習を解決するための努力をしてください、あなたが前に出てきた内容を理解し合理的に確信している時のみ継続してください。
    </div>

    <div>
      <br />
    </div>
  </div>

  <blockquote class="sgc-2">
    <div class="sgc-1">
      コンピュータプログラマーは、その人が担当する宇宙の唯一の生みの親です。事実上無制限の複雑さの世界は、コンピュータプログラムという形で形成することができます。ジョセフ・ワイゼンバウムの作った、人工知能のプログラムは多くの事が含まれています。
    </div>
  </blockquote>

  <div>
    <div>
      <br />
    </div>

    <div>
      プログラムとは、多くのことです。それはプログラマが入力したテキストの一部であり、それはコンピュータが行うべきことを行えるように指示する力であり、それはコンピュータのメモリ内のデータであり、それは同じメモリ上で実行されるアクションを制御するものです。私たちが慣れ親しんだものにプログラムをなぞらえる比喩は失敗しがちだが、表面的に適してる比喩は機械だ。機械式時計の歯車は、巧みに噛みあって収まっている。そして、時計職人が優れていれば、それは正確に何年もの時を刻むことができます。プログラムの要素は、同様の方法で巧みに噛みあって収まっている。プログラマが、それらが何をしているか知っていれば、プログラムがクラッシュすることなく実行されます。
    </div>

    <div>
      <br />
    </div>

    <div>
      コンピュータはこれらの無形のパーツのホストとして動作するように構築されたマシンです。コンピュータ自身はまぬけで容易なことしか行うことができません。コンピュータがとても役立つ理由は、それの動作が信じられないほど速いからです。プログラムは、工夫によってシンプルなアクションを繋ぎ、とても複雑なことを行うことができます。
    </div>

    <div>
      <br />
    </div>

    <div>
      私たちの中のいくらかにとって、プログラムを書くことは魅力的なゲームです。プログラムは思考の建造物です。それは私たちのタイピングする手の下で無重量のものを建造します。もし夢中になれば、建造物のサイズと複雑さはコントロールできないほど成長します。誰が作ったかわからなります？　これがプログラミングでよくある問題です。今日のソフトウェアは、クラッシュし、失敗し、台無しになる傾向があるのには理由があるわけです。
    </div>

    <div>
      <br />
    </div>

    <div>
      プログラムが動作した時、それは美しいです。プログラミングの技術とは、制御の複雑さのスキルです。素晴らしいプログラムは抑制され、その複雑なことを簡単に行うこと。
    </div>

    <div>
      <br />
    </div>

    <div>
      <hr class="sigilChapterBreak" />
    </div>

    <div>
      <br />
    </div>

    <div>
      今日、多くのプログラマーは、この複雑さは小さくて正しいプログラムでできた中身を考慮しなくても良いパッケージでのみ、ベストな管理をされると信じています。
    </div>

    <div>
      <br />
    </div>

    <div>
      高級言語はなんてムカツクんだろう？それを何か回りくどくなく予測ができる、自然で美しいプログラムに則ったものへ交換してみたてどうですか。そのプログラミングテクニックの全容は、巨大で、多様が魅力的で、静かに大きく人跡未踏です。
    </div>

    <div>
      <br />
    </div>

    <div>
      それは間違いなく落とし穴と罠まみれに散らかっており、経験不足のプログラマーをあらゆる種類の恐ろしいミスに引きつけるが、あなたの知性を用いて注意喚起をしつづけるべきだ。学ぶあなたは、常にチャレンジャーであり、新しい領域への探検家です。探検し続けることを止めたプログラマーは、着実に活気がなくなり、喜びを忘れ、プログラムを失う。(そして、マネージャーとなる。)
    </div>

    <div>
      <br />
    </div>

    <div>
      関心があるまで、プログラムがハッキリと基準に則ってるかどうか補正する。効率、明瞭さ、そして容量はやはり重要ですが、異なった判断の事象同士がどのように均衡を保つか、その判断とは他のプログラマーが作った？親指のルール(慣用句？)は有用ですが、それ自身が壊れることは恐れられてはいません。
    </div>

    <div>
      <br />
    </div>

    <div>
      <hr class="sigilChapterBreak" />
    </div>

    <div>
      <br />
    </div>

    <div>
      まず最初に、コンピューティングの誕生した時、プログラミング言語はありませんでした。プログラムは以下みたいな感じでした。
    </div>
  </div>

  <div>
    <br />
  </div>

  <blockquote class="sgc-2"></blockquote>

  <p><span class="sgc-3">00110001 00000000 00000000 00110011 00000001 00000010 00100010 00000010 00001000 01000001 00000001 00000001 01100010 00000000 00000000</span><br /></p>

  <div class="layoutArea column">
    <p><span class="sgc-4">00110001 00000001 00000001 01010001 00001011 00000010 01000011 00000001 00000000 00&nbsp;</span></p>
  </div>

  <div>
    <div>
      上のプログラムは、1から10までを足し、そして結果を出力します。これは、とても単純な種類のコンピュータで走らせることができました。初期のコンピュータにおけるプログラムにおいて大切だったこととは、大きなスイッチを右に配置するということや、むき出しのカードボードに穴を開け、それらをコンピュータに与えるということでした。これが退屈だったということや、エラーのでやすい傾向がある手段だということがイメージできます。シンプルなプログラムを書くということは、より多くの器用さや訓練を必要とする(なんて、信じられないでしょう)
    </div>

    <div>
      <br />
    </div>

    <div>
      当然、神秘的で少しパターン的なアレに手作業で入ること、プログラマーにディープで強力な魔法使いのような五感を与えましょう。そして、それは仕事時間を満たすのに値します。
    </div>

    <div>
      <br />
    </div>

    <div>
      プログラムは一行に一つの指示を含む。それはこのように英語みたいに書けます。
    </div>

    <div class="section section section layoutArea column sgc-6">
      <ol>
        <li><span class="sgc-5">Store the number</span> <span class="sgc-4">0</span> <span class="sgc-5">in memory location</span> <span class="sgc-4">0</span><br /></li>

        <li><span class="sgc-5">Store the number</span> <span class="sgc-4">1</span> <span class="sgc-5">in memory location</span> <span class="sgc-4">1</span><br /></li>

        <li><span class="sgc-5">Store the value of memory location</span> <span class="sgc-4">1</span> <span class="sgc-5">in location</span> <span class="sgc-4">2</span><br /></li>

        <li><span class="sgc-5">Subtract the number</span> <span class="sgc-4">11</span> <span class="sgc-5">from the value in location</span> <span class="sgc-4">2</span><br /></li>

        <li><span class="sgc-5">If the value in memory location</span> <span class="sgc-4">2</span> <span class="sgc-5">is the number</span> <span class="sgc-4">0,</span> <span class="sgc-5">continue</span><br /></li>

        <li><span class="sgc-5">with instruction</span> <span class="sgc-4">9</span><br /></li>

        <li><span class="sgc-5">Add the value of memory location</span> <span class="sgc-4">1</span> <span class="sgc-5">to location</span> <span class="sgc-4">0</span> <span class="sgc-5">Add the number</span> <span class="sgc-4">1</span> <span class="sgc-5">to the value of memory location</span> <span class="sgc-4">1</span> <span class="sgc-5">Continue with instruction</span> <span class="sgc-4">3</span><br /></li>

        <li><span class="sgc-5">Output the value of memory location</span> <span class="sgc-4">0&nbsp;</span><br /></li>
      </ol>
    </div>

    <div>
      <br />
    </div>

    <div>
      バイナリースープよりも読みやすい間、やはり幾分か面白みにかける。それは命令やロケーションの名前の代わりに、数字を使用するのに役立つでしょう。
    </div>

    <div class="section section section layoutArea column sgc-6">
      <p><span class="sgc-5">Set</span> <span class="sgc-4">'total'</span> <span class="sgc-5">to</span> <span class="sgc-4">0<br /></span> <span class="sgc-5">Set</span> <span class="sgc-4">'count'</span> <span class="sgc-5">to</span> <span class="sgc-4">1<br />
      [loop]<br /></span> <span class="sgc-5">Set</span> <span class="sgc-4">'compare'</span> <span class="sgc-5">to</span> <span class="sgc-4">'count'<br /></span> <span class="sgc-5">Subtract</span> <span class="sgc-4">11</span> <span class="sgc-5">from</span> <span class="sgc-4">'compare'<br /></span> <span class="sgc-5">If</span> <span class="sgc-4">'compare'</span> <span class="sgc-5">is zero, continue at</span> <span class="sgc-4">[end]</span> <span class="sgc-5">Add</span> <span class="sgc-4">'count'</span> <span class="sgc-5">to</span> <span class="sgc-4">'total'</span></p>

      <p><span class="sgc-5">Add</span> <span class="sgc-4">1</span> <span class="sgc-5">to</span> <span class="sgc-4">'count'</span> <span class="sgc-5">Continue at</span> <span class="sgc-4">[loop] [end]<br /></span> <span class="sgc-5">Output</span> <span class="sgc-4">'total'</span></p>
    </div>

    <div>
      この時点では、プログラムの動作確認をするのに難しいことはありません。
    </div>

    <div>
      最初の二行は、2つのメモリロケーションにそれぞれ初期値を与え、totalはプログラムの結果を構築するために使用され、countは今見てる数を追跡できます。compareを使用してる行は、おそらく最も奇妙なものです。どのようなプログラムが何をしたいの、いつ停止するかを決定するのにcountが11と等しいかどうかをチェックします。マシンは非常に単純なので、数が0であるかをテストして、それに基づいてのみジャンプするかを決定する。なので、countの値を計算するためにラベルされたメモリロケーションは、compareで使用で、それに基づいて決定を行います。次の二行はカウントの値を結果に与え、プログラムで常に増加量countは決める、それがまだ11じゃないかを。これはCoffeeScriptで書かれた同じプログラムです。
    </div>

    <div class="column">
      <p><span class="sgc-5">total</span> <span class="sgc-4">= 0<br /></span> <span class="sgc-5">count</span> <span class="sgc-4">= 1<br /></span> <span class="sgc-7">while</span> <span class="sgc-5">count</span> <span class="sgc-4">&lt;= 10</span></p>

      <p><span class="sgc-5">total</span> <span class="sgc-4">+=</span> <span class="sgc-5">count</span></p>

      <p><span class="sgc-5">count</span> <span class="sgc-4">+= 1</span> <span class="sgc-7">show</span> <span class="sgc-5">total&nbsp;</span></p>
    </div>

    <div>
      これは私たちに改善を与えました。最も重要なのは、これからはもう、あの頃の私たちが望んだ再帰呼び出しを指定する必要はないということだ。魔法の言葉、”while”がその面倒を見てくれる。count&lt;=10、つまりcountが10以下という条件が真である間、インデントされた中の実行を繰り返す。どうやら、もはや一時的な値を作り、それを0と比較することは必要ありません。これは小さくて愚かな詳細でした、プログラミング言語の力は私たちに小さな愚かな詳細の面倒をみてくれます。
    </div>

    <div>
      <br />
    </div>

    <div>
      どうやら、またCoffeescriptによって短く表現されました。
    </div>

    <div>
      <p><span class="sgc-5">total</span> <span class="sgc-4">= 0<br /></span> <span class="sgc-5">total</span> <span class="sgc-4">+=</span> <span class="sgc-5">count</span> <span class="sgc-7">for</span> <span class="sgc-5">count</span> <span class="sgc-7">in</span> <span class="sgc-4">[1..10]</span> <span class="sgc-7">show</span> <span class="sgc-5">total&nbsp;</span></p>
    </div>

    <div>
      forとinという単語は1~10という数字の範囲を通過し、その間countに数字をあてがいます。countに入ったそれぞれの値はtotalに加えます。
    </div>

    <div>
      <br />
    </div>

    <div>
      最後に、便利で効果的なsumを用いると、数字を加算していくことができるみたいです。これは数学記号のΣ10, n=1 n:に似ています。
    </div>

    <div>
      <br />
    </div>

    <div>
      show sum [1..10]
    </div>

    <div>
      <br />
    </div>

    <div>
      他の可能性はデータの型を付属する関数を持つことです。以下の場合のsumでは配列を追加して、配列の中の要素の合計を与えます。
    </div>

    <div>
      <br />
    </div>

    <div>
      show [1..10].sum()<br />
    </div>

    <div>
      <br />
    </div>

    <div>
      この話の教訓は、上記のように同じプログラムを長くも短くも読み難くも読み易くも表現できる、ということです。プログラムの最初のバージョンは非常に不明瞭でしたが、一方で最後の方ではほとんど英語のように明瞭です。show the sum of numbers from 1 to 10.みたいにね。(後に出てくる章で、sumのようなものを作る方法が出てきます。)
    </div>

    <div>
      <br />
    </div>

    <div>
      多くの抽象的な方法を提供することにより、良いプログラミング言語はプログラマーを助けます。それは退屈な細部を隠し、便利なwhileのよう積み木を与え、プログラマーがsumのような建築物を加えることを許可します。
    </div>

    <div>
      <br />
    </div>

    <div>
      <hr class="sigilChapterBreak" />
    </div>

    <div>
      <br />
    </div>

    <div>
      JavaScriptは、今のところ、巧妙なものから悲惨なものまで全てのWorld Wide Webにあるページで最も使われている言語です。JavaScriptはアプリやOSでのスクリプトの記述でも使われています。特に、ウェブアプリの一部の機能のようなサーバーサイドJavaScriptはJavaScriptで書かれています。なのでひとつの言語だけでアプリケーションを全て表現することができます。CoffeeScriptは標準的なJavaScriptコードを生成し、結果、標準的なJavaScriptが許可されている環境で使われる。これは、ブラウザの一部とサーバーの一部、双方をCoffeeScriptで書けることを意味する。
    </div>

    <div>
      <br />
    </div>

    <div>
      CoffeeScriptは新しい言語なので、まだ一般的なアプリ開発において人気になるかはわからないが、もしあなたがプログラミングに興味がわいたならば、CoffeeScriptは間違いなく学ぶのに有用な言語です。あなたがウェブプログラミングをすることにならないとしても、この本の僭越なプログラムは常にあなたと共にあり、あなたを訪れ、他の言語であなたが書いたプログラムに影響を与えます。
    </div>

    <div>
      <br />
    </div>

    <div>
      JavaScriptは極めてひどいと言われるでしょう。その多くは事実です。初めて何かをJavascriptで書いたとき、私はすぐにこの言語を見下しました。ほとんど全てタイプしていたが、これは私の意味する完全に異なった解釈でした。私が手がかりを持っていなかった多くのすべきことがありましたが、以下もまた核心です。JavaScriptはそれが許す限り途方もなく自由です。この設計の裏側のアイデアは初心者にとってJavaScriptでのプログラミングをより簡単にしただろう。実際、システムはプログラムの問題の箇所を示してくれないので、多くの場合それを探すことは困難です。
    </div>

    <div>
      <br />
    </div>

    <div>
      しかし、その言語(CoffeeScript)の柔軟性はそれを可能にします。より厳格な言語では不可能な多くの技術のためのスペースを残し、幾つかのJavaScriptの欠点を克服するために使用することができます。適切にそれを学び、そしてしばらく作業をした後、私は本当にこの言語が好きなのだと学びました。CoffeeScriptは不明確で扱いにくいJavaScriptの一面を修理し、その基礎に柔軟性と美しさを保ち続けます。まさに一石二鳥です。(doubleplusgood)
    </div>

    <div>
      <br />
    </div>

    <div>
      <hr class="sigilChapterBreak" />
    </div>

    <div>
      <br />
    </div>

    <div>
      この本の多くの章はかなり多くのコードを含みます。私の経験では、プログラムを勉強するのにコードを読んだり書いたりすることはとても重要な要素です。これらのサンプルをざっと目を通すのではなく、注意深く読み理解をするようにしてください。最初はゆっくりと混乱しますが、すぐにコツが分かるでしょう。エキササイズでも同じことが言えます。実際に実用的なソリューションを書くまでは理解してると思わないでください。
    </div>

    <div>
      <br />
    </div>

    <div>
      ウェブの仕組みから、人々がウェブページに置いたJavaScriptのプログラムを見ることは可能です。幾つかのことが行われているのを学ぶのに、これはいい方法です。ほとんどのウェブプログラマーは”玄人”プログラマーではなく、JavaScriptのプログラミングをきちんと学んだことがなく興味がないと思っているので、とっても低クオリティのコードを見ることができます。見苦しい、または間違ったコードから学ぶときは、見苦しさと混乱があなたのコードに伝わるので、学んでいるときは注意してください。それとは違った他のプログラムのソースは、GithubのようなオープンソースサービスでホストされているCoffeeScriptのプロジェクトにあります。
    </div>

    <div>
      <br />
    </div>

    <div>
      ーーーーーーーーーーーーーーーーーーーー
    </div>

    <div>
      Takahiro Yoshida (@yoshidatkhr)
    </div>

    <div>
      Tsutomu Kawamura (@cognitom)
    </div>

    <div>
      Eikichi Yamaguchi(@glasses_factory)
    </div>

    <div>
      Keiichiro Matsumoto (@matsumos)
    </div>

    <div>
      Keisuke Yamashita (@tinkle_popo)
    </div>

    <div>
      Daijiro Wachi* (@watilde)
    </div>

    <div>
      <br />
    </div>

    <div>
      * main translator
    </div>
  </div>
</body>
</html>
