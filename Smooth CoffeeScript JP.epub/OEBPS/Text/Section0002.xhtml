<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
</head>

<body>
  <p>P6</p>

  <h2 id="heading_id_2">導入<br /></h2>

  <p>CoffeeScriptは、Jeremy Ashkenasによって作られた、JavaScriptの輝かしい革命です。この本はMarijn Haverbekeの著書『雄弁なるJavaScript』(”Eloquent JavaScript”)を発展させることを試みています。JavaScriptの代わりとしてのCoffeeScriptは、その大きな変化はともかく、それ以外にも数えきれない程多くの変更が加えられたので説明する過程で加筆修正を行いました。</p>

  <p>従って、この本で表現されている全てのものの文責は、ひとえに編集者にあります。OSSと同様の意味合いで、この本はフォークです。オリジナルの著者によって意図された素晴らしい作品を読みたければ、Marijn　Haverbekeの著書『雄弁なるJavaScript』(”Eloquent JavaScript”)を参照してください。</p>

  <p>JavaScriptを知る必要はないですが、Smooth CoffeeScriptを読んだ後に、Simon Willisonの著書『JavaScript再入門』(“A re-introduction to JavaScript”)を読めば、デバッグのときや、JavaScriptライブラリを使用する際に役立ち得る概要が分かります。</p>

  <p>この本で出てくるプログラムの例は、CoffeeScript環境に加えてPreludeファイルを使用します。Preludeファイルには、Underscore.jsの関数ライブラリ、CoffeekupによるHTMLのマークアップ、サーバーサイドWebSockets、QuickCheckテストライブラリが含まれます。これらのライブラリはCoffeeScriptを便利な抽象性とテストツールによって拡張して、気の散るような定型コードを排除し、目の前のタスクへの集中を助けます。</p>

  <p>原始的な言語のとても小さな一式でプログラムを表現することは可能ですが、それはすぐに冗長になるし、エラーがでやすい傾向にあります。ここで採用されるアプローチは、まるでプログラミング言語のネイティブの一部であるかのように機能的な積み木の一式をより広く含むことです。これらのより高いレベルの構成の観点で考えることによって、より複雑な問題を、より少ない労力で処理することができます。</p>

  <p>正確さを保証するためにテストすることが必要です。これは、特にダイナミック言語や型なし言語で再利用可能なアルゴリズムを開発する際は当てはまります。機能が導入されるやいなや、QuickCheckスタイルのテストケースが積み重なっていくことによって、ライティングテストと前提の宣言が一つの途切れないライティングソフトの部分になることを意味しています。</p>

  <p><br /></p>
</body>
</html>
